// Code generated by MockGen. DO NOT EDIT.
// Source: shell.go

// Package mock_collectors is a generated GoMock package.
package mock_collectors

import (
	reflect "reflect"

	types "github.com/ajaypanthagani/sugabred/types"
	gomock "github.com/golang/mock/gomock"
)

// MockShellCollector is a mock of ShellCollector interface.
type MockShellCollector struct {
	ctrl     *gomock.Controller
	recorder *MockShellCollectorMockRecorder
}

// MockShellCollectorMockRecorder is the mock recorder for MockShellCollector.
type MockShellCollectorMockRecorder struct {
	mock *MockShellCollector
}

// NewMockShellCollector creates a new mock instance.
func NewMockShellCollector(ctrl *gomock.Controller) *MockShellCollector {
	mock := &MockShellCollector{ctrl: ctrl}
	mock.recorder = &MockShellCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShellCollector) EXPECT() *MockShellCollectorMockRecorder {
	return m.recorder
}

// CollectShell mocks base method.
func (m *MockShellCollector) CollectShell() (*types.ShellSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectShell")
	ret0, _ := ret[0].(*types.ShellSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectShell indicates an expected call of CollectShell.
func (mr *MockShellCollectorMockRecorder) CollectShell() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectShell", reflect.TypeOf((*MockShellCollector)(nil).CollectShell))
}
