// Code generated by MockGen. DO NOT EDIT.
// Source: collector.go

// Package mock_collectors is a generated GoMock package.
package mock_collectors

import (
	reflect "reflect"

	types "github.com/ajaypanthagani/sugabred/types"
	gomock "github.com/golang/mock/gomock"
)

// MockDevEnvCollector is a mock of DevEnvCollector interface.
type MockDevEnvCollector struct {
	ctrl     *gomock.Controller
	recorder *MockDevEnvCollectorMockRecorder
}

// MockDevEnvCollectorMockRecorder is the mock recorder for MockDevEnvCollector.
type MockDevEnvCollectorMockRecorder struct {
	mock *MockDevEnvCollector
}

// NewMockDevEnvCollector creates a new mock instance.
func NewMockDevEnvCollector(ctrl *gomock.Controller) *MockDevEnvCollector {
	mock := &MockDevEnvCollector{ctrl: ctrl}
	mock.recorder = &MockDevEnvCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevEnvCollector) EXPECT() *MockDevEnvCollectorMockRecorder {
	return m.recorder
}

// CollectAll mocks base method.
func (m *MockDevEnvCollector) CollectAll() (*types.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectAll")
	ret0, _ := ret[0].(*types.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectAll indicates an expected call of CollectAll.
func (mr *MockDevEnvCollectorMockRecorder) CollectAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectAll", reflect.TypeOf((*MockDevEnvCollector)(nil).CollectAll))
}
