// Code generated by MockGen. DO NOT EDIT.
// Source: brew.go

// Package mock_collectors is a generated GoMock package.
package mock_collectors

import (
	reflect "reflect"

	types "github.com/ajaypanthagani/sugabred/types"
	gomock "github.com/golang/mock/gomock"
)

// MockBrewCollector is a mock of BrewCollector interface.
type MockBrewCollector struct {
	ctrl     *gomock.Controller
	recorder *MockBrewCollectorMockRecorder
}

// MockBrewCollectorMockRecorder is the mock recorder for MockBrewCollector.
type MockBrewCollectorMockRecorder struct {
	mock *MockBrewCollector
}

// NewMockBrewCollector creates a new mock instance.
func NewMockBrewCollector(ctrl *gomock.Controller) *MockBrewCollector {
	mock := &MockBrewCollector{ctrl: ctrl}
	mock.recorder = &MockBrewCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrewCollector) EXPECT() *MockBrewCollectorMockRecorder {
	return m.recorder
}

// CollectCasks mocks base method.
func (m *MockBrewCollector) CollectCasks() ([]types.BrewCask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectCasks")
	ret0, _ := ret[0].([]types.BrewCask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectCasks indicates an expected call of CollectCasks.
func (mr *MockBrewCollectorMockRecorder) CollectCasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectCasks", reflect.TypeOf((*MockBrewCollector)(nil).CollectCasks))
}

// CollectPackages mocks base method.
func (m *MockBrewCollector) CollectPackages() ([]types.BrewPackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectPackages")
	ret0, _ := ret[0].([]types.BrewPackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectPackages indicates an expected call of CollectPackages.
func (mr *MockBrewCollectorMockRecorder) CollectPackages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectPackages", reflect.TypeOf((*MockBrewCollector)(nil).CollectPackages))
}
