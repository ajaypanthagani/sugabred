// Code generated by MockGen. DO NOT EDIT.
// Source: env.go

// Package mock_commands is a generated GoMock package.
package mock_commands

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEnvCommander is a mock of EnvCommander interface.
type MockEnvCommander struct {
	ctrl     *gomock.Controller
	recorder *MockEnvCommanderMockRecorder
}

// MockEnvCommanderMockRecorder is the mock recorder for MockEnvCommander.
type MockEnvCommanderMockRecorder struct {
	mock *MockEnvCommander
}

// NewMockEnvCommander creates a new mock instance.
func NewMockEnvCommander(ctrl *gomock.Controller) *MockEnvCommander {
	mock := &MockEnvCommander{ctrl: ctrl}
	mock.recorder = &MockEnvCommanderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvCommander) EXPECT() *MockEnvCommanderMockRecorder {
	return m.recorder
}

// Environ mocks base method.
func (m *MockEnvCommander) Environ() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environ")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Environ indicates an expected call of Environ.
func (mr *MockEnvCommanderMockRecorder) Environ() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environ", reflect.TypeOf((*MockEnvCommander)(nil).Environ))
}
