// Code generated by MockGen. DO NOT EDIT.
// Source: file.go

// Package mock_commands is a generated GoMock package.
package mock_commands

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileCommander is a mock of FileCommander interface.
type MockFileCommander struct {
	ctrl     *gomock.Controller
	recorder *MockFileCommanderMockRecorder
}

// MockFileCommanderMockRecorder is the mock recorder for MockFileCommander.
type MockFileCommanderMockRecorder struct {
	mock *MockFileCommander
}

// NewMockFileCommander creates a new mock instance.
func NewMockFileCommander(ctrl *gomock.Controller) *MockFileCommander {
	mock := &MockFileCommander{ctrl: ctrl}
	mock.recorder = &MockFileCommanderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileCommander) EXPECT() *MockFileCommanderMockRecorder {
	return m.recorder
}

// ReadFile mocks base method.
func (m *MockFileCommander) ReadFile(path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileCommanderMockRecorder) ReadFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileCommander)(nil).ReadFile), path)
}
