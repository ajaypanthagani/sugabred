// Code generated by MockGen. DO NOT EDIT.
// Source: brew.go

// Package mock_commands is a generated GoMock package.
package mock_commands

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBrewCommander is a mock of BrewCommander interface.
type MockBrewCommander struct {
	ctrl     *gomock.Controller
	recorder *MockBrewCommanderMockRecorder
}

// MockBrewCommanderMockRecorder is the mock recorder for MockBrewCommander.
type MockBrewCommanderMockRecorder struct {
	mock *MockBrewCommander
}

// NewMockBrewCommander creates a new mock instance.
func NewMockBrewCommander(ctrl *gomock.Controller) *MockBrewCommander {
	mock := &MockBrewCommander{ctrl: ctrl}
	mock.recorder = &MockBrewCommanderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrewCommander) EXPECT() *MockBrewCommanderMockRecorder {
	return m.recorder
}

// RunBrewInfoJSON mocks base method.
func (m *MockBrewCommander) RunBrewInfoJSON(name string, isCask bool) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunBrewInfoJSON", name, isCask)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunBrewInfoJSON indicates an expected call of RunBrewInfoJSON.
func (mr *MockBrewCommanderMockRecorder) RunBrewInfoJSON(name, isCask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunBrewInfoJSON", reflect.TypeOf((*MockBrewCommander)(nil).RunBrewInfoJSON), name, isCask)
}

// RunBrewListCask mocks base method.
func (m *MockBrewCommander) RunBrewListCask() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunBrewListCask")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunBrewListCask indicates an expected call of RunBrewListCask.
func (mr *MockBrewCommanderMockRecorder) RunBrewListCask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunBrewListCask", reflect.TypeOf((*MockBrewCommander)(nil).RunBrewListCask))
}

// RunBrewListFormula mocks base method.
func (m *MockBrewCommander) RunBrewListFormula() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunBrewListFormula")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunBrewListFormula indicates an expected call of RunBrewListFormula.
func (mr *MockBrewCommanderMockRecorder) RunBrewListFormula() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunBrewListFormula", reflect.TypeOf((*MockBrewCommander)(nil).RunBrewListFormula))
}
